import os
import re
import base64
from uuid import uuid4
import aiohttp

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram import Bot

for_user_router = Router()

# ==== FSM –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ email ====
class EmailState(StatesGroup):
    waiting_for_email = State()

# ==== –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞ ====
def receipt_choice_keyboard(amount_key: str):
    kb = InlineKeyboardBuilder()
    kb.button(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data=f"receipt_phone:{amount_key}")
    kb.button(text="üìß –ù–∞ email", callback_data=f"receipt_email:{amount_key}")
    return kb.as_markup()

# ==== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ ====
@for_user_router.callback_query(F.data.startswith("pay"))
async def choose_receipt_method(callback: CallbackQuery):
    data_key = callback.data  # –Ω–∞–ø—Ä–∏–º–µ—Ä "pay30"
    await callback.message.answer(
        "–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫?",
        reply_markup=receipt_choice_keyboard(data_key)
    )
    await callback.answer()

# ==== 1. –ß–µ–∫ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω ====
@for_user_router.callback_query(F.data.startswith("receipt_phone"))
async def request_phone(callback: CallbackQuery):
    amount_key = callback.data.split(":")[1]

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=kb
    )
    await callback.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –≤ state
    state: FSMContext = callback.bot['fsm_context']
    await state.set_data({"amount_key": amount_key, "method": "phone"})

# ==== –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ ====
@for_user_router.message(F.contact)
async def got_contact(message: Message, state: FSMContext, bot: Bot, session: AsyncSession):
    user_data = await state.get_data()
    amount_key = user_data.get("amount_key")
    phone_number = message.contact.phone_number

    await create_yookassa_payment(message, bot, amount_key, phone=phone_number)
    await state.clear()

# ==== 2. –ß–µ–∫ –Ω–∞ email ====
@for_user_router.callback_query(F.data.startswith("receipt_email"))
async def request_email(callback: CallbackQuery, state: FSMContext):
    amount_key = callback.data.split(":")[1]
    await state.set_data({"amount_key": amount_key, "method": "email"})
    await callback.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ email –≤ —á–∞—Ç. –ù–∞ –Ω–µ–≥–æ –±—É–¥–µ—Ç –≤—ã—Å–ª–∞–Ω —á–µ–∫:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(EmailState.waiting_for_email)
    await callback.answer()

# ==== –ü–æ–ª—É—á–µ–Ω–∏–µ email –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ ====
@for_user_router.message(EmailState.waiting_for_email)
async def got_email(message: Message, state: FSMContext, bot: Bot, session: AsyncSession):
    email = message.text.strip()
    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.")
        return

    user_data = await state.get_data()
    amount_key = user_data.get("amount_key")

    await create_yookassa_payment(message, bot, amount_key, email=email)
    await state.clear()

# ==== –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å —á–µ–∫–æ–º ====
async def create_yookassa_payment(message: Message, bot: Bot, amount_key: str, phone=None, email=None):
    amount_map = {
        "pay30": 30,
        "pay550": 550,
        "pay2500": 2500
    }
    amount = amount_map.get(amount_key)
    if not amount:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—É–º–º–∞.")
        return

    return_url = f"https://t.me/{(await bot.me()).username}"

    receipt = {
        "customer": {},
        "items": [
            {
                "description": f"–ü–æ–∫—É–ø–∫–∞ –Ω–∞ {amount}‚ÇΩ",
                "quantity": "1.00",
                "amount": {"value": f"{amount:.2f}", "currency": "RUB"},
                "vat_code": 1
            }
        ]
    }
    if phone:
        receipt["customer"]["phone"] = phone
    if email:
        receipt["customer"]["email"] = email

    payment_payload = {
        "amount": {"value": f"{amount:.2f}", "currency": "RUB"},
        "confirmation": {"type": "redirect", "return_url": return_url},
        "capture": True,
        "description": f"–ü–æ–∫—É–ø–∫–∞ –Ω–∞ {amount}‚ÇΩ",
        "metadata": {"telegram_id": str(message.from_user.id)},
        "receipt": receipt
    }

    def base64_auth():
        shop_id = os.getenv("YOOKASSA_SHOP_ID")
        secret = os.getenv("YOOKASSA_SECRET_KEY")
        raw = f"{shop_id}:{secret}".encode()
        return base64.b64encode(raw).decode()

    headers = {
        "Authorization": f"Basic {base64_auth()}",
        "Content-Type": "application/json",
        "Idempotence-Key": str(uuid4())
    }

    try:
        async with aiohttp.ClientSession() as session_http:
            async with session_http.post(
                url="https://api.yookassa.ru/v3/payments",
                json=payment_payload,
                headers=headers
            ) as resp:
                payment_response = await resp.json()

        print("üì¶ –û—Ç–≤–µ—Ç –æ—Ç –ÆKassa:", payment_response)

        if "confirmation" not in payment_response:
            error_text = payment_response.get("description", "–ù–µ—Ç –ø–æ–ª—è confirmation")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ÆKassa: {error_text}")
            return

        confirmation_url = payment_response["confirmation"]["confirmation_url"]
        await message.answer(
            f'–í—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã'
            f'\n\n–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã, –æ–Ω–∏ –æ—Ç–æ–±—Ä–∞–∑—è—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ -> ‚≠êÔ∏è –ë–∞–ª–∞–Ω—Å'
            f'\n\n<blockquote>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ Yoomoney (—Å–µ—Ä–≤–∏—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ü–ê–û "–°–±–µ—Ä–±–∞–Ω–∫")</blockquote>',
            reply_markup=InlineKeyboardBuilder().button(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=confirmation_url).as_markup()
        )

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:", e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.")
