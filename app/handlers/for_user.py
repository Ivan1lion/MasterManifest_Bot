import asyncio
import os
import random
import string
from uuid import uuid4
import aiohttp
import base64
from aiogram import F, Router, types, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile, CallbackQuery, InputMediaPhoto, PreCheckoutQuery, ContentType, SuccessfulPayment
from aiogram.enums import ParseMode
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select


from app.handlers.text_for_user import text_privacy, text_offer, text_hello, text_info, text_hello2
import app.handlers.keyboards as kb
from app.handlers.keyboards import payment_button_keyboard
from app.db.crud import get_or_create_user, get_last_post_id, set_last_post_id
from app.db.models import User
from app.db.config import session_maker
from app.openai_assistant.client import ask_assistant
from app.openai_assistant.queue import openai_queue


channel = int(os.getenv("CHANNEL_ID"))

for_user_router = Router()


# –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ú–ï–ù–Æ
@for_user_router.message(Command("info"))
async def policy_cmd(message: Message):
    await message.answer(text_info)


@for_user_router.message(Command("balance"))
async def policy_cmd(message: Message, bot: Bot, session: AsyncSession):
    result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
    user = result.scalar_one_or_none()
    if user.requests_left == 0:
        await message.answer(f"üö´ –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã"
                             f"\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å", reply_markup=kb.pay)
        return
    text_balance = (f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                    f"–Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: [ {user.requests_left} ]"
                    f"\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ")
    await message.answer(text_balance, reply_markup=kb.pay)


@for_user_router.message(Command("hello"))
async def offer_cmd(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –º–µ–¥–∏–∞-—Ñ–∞–π–ª—É
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))
    GIF_PATH = os.path.join(BASE_DIR, "..", "mediafile_for_bot", "My_photo.png")
    gif_file = FSInputFile(os.path.abspath(GIF_PATH))
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞
    wait_msg = await message.answer_photo(photo=gif_file, caption=text_hello)
    await message.answer(text_hello2)


@for_user_router.message(Command("privacy"))
async def policy_cmd(message: Message):
    await message.answer(text_privacy)


@for_user_router.message(Command("offer"))
async def offer_cmd(message: Message):
    await message.answer(text_offer)







# –∫–æ–º–∞–Ω–¥ –°–¢–ê–†–¢
@for_user_router.message(CommandStart())
async def cmd_start(message: Message, bot: Bot, session: AsyncSession):
    await get_or_create_user(session, message.from_user.id, message.from_user.username)
    typing_msg = await message.answer("Master Manifest –ø–∏—à–µ—Ç üí¨")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    await bot.send_chat_action(chat_id=message.chat.id, action="typing") # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await asyncio.sleep(4)
    await typing_msg.delete()
    string = (f"–Ø ‚Äî Master Manifest. –û–±—ä—è—Å–Ω—è—é —Å–ª–æ–∂–Ω–æ–µ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º"
              f"\n\n<blockquote>–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Ç–µ–º –∫–∞–∫ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –∂–µ–ª–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å, —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–∏–ª—É –º—ã—Å–ª–∏ –∏ —É–±—Ä–∞—Ç—å "
              f"–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –±–ª–æ–∫–∏, –º–µ—à–∞—é—â–∏–µ –∏–∑–æ–±–∏–ª–∏—é "
              f"\n\n–í–æ–æ–±—Ä–∞–∑–∏, —á—Ç–æ —Ç—ã —É–∂–µ –∂–∏–≤—ë—à—å —Ç–æ–π –∂–∏–∑–Ω—å—é, –æ –∫–æ—Ç–æ—Ä–æ–π –º–µ—á—Ç–∞–µ—à—å ‚Äî —è (–±—É–¥—É—á–∏ –æ–≥—Ä–æ–º–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π –∑–Ω–∞–Ω–∏–π) "
              f"–ø–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ –∫ –Ω–µ–π –ø—Ä–∏–π—Ç–∏ –±—ã—Å—Ç—Ä–µ–µ</blockquote> "
              f"\n\nüìñ –í–æ—Ç –∫–∞–∫ –º—ã –º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å:"
              f"\n1Ô∏è‚É£ –¢—ã –∑–∞–¥–∞—ë—à—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–ø–∏—Å—ã–≤–∞–µ—à—å —Å–∏—Ç—É–∞—Ü–∏—é"
              f"\n2Ô∏è‚É£ –Ø –¥–∞—é –ø–æ–Ω—è—Ç–Ω—ã–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
              f"\n\n–ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –≠—Ç–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã —è –ø–æ–Ω–∏–º–∞–ª —Å –∫–µ–º —è —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—é "
              f"(–º—É–∂—á–∏–Ω–∞ –∏–ª–∏ –∂–µ–Ω—â–∏–Ω–∞) –∏ –∫–∞–∫ –º–Ω–µ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è "
              f"\n\n–§–æ—Ä–º–∞—Ç:"
              f"\n<blockquote>–ú–µ–Ω—è –∑–æ–≤—É—Ç <i>(—Ç–≤–æ—ë –∏–º—è)</i></blockquote>"
              f"\n\n–ò—Ç–∞–∫, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? üëã")
    await message.answer(text=string)






# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò

@for_user_router.message(~(F.text))
async def filter(message: Message):
    await message.delete()
    await message.answer("–ó–∞–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–∫—Å—Ç–∞")





# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


# –§—É–Ω–∫—Ü–∏—è, —á—Ç–æ–±—ã –∫—Ä—É—Ç–∏–ª—Å—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
async def send_typing(bot, chat_id, stop_event):
    while not stop_event.is_set():
        await bot.send_chat_action(chat_id=chat_id, action="typing")
        await asyncio.sleep(4.5)

@for_user_router.message(F.text)
async def handle_text(message: Message, session: AsyncSession, bot: Bot):
    result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
    user = result.scalar_one_or_none()
    if user.requests_left == 0:
        await message.answer(f"üö´ –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å"
                             f"\n\n<a href='https://telegra.ph/pvapavp-07-04'>"
                             "(–ü–æ—á–µ–º—É –±–æ—Ç —Å—Ç–∞–ª –ø–ª–∞—Ç–Ω—ã–º?)</a>", reply_markup=kb.pay)
        return

    if not openai_queue:
        await message.answer("‚ö†Ô∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ")
        return

    try:
        typing_msg = await message.answer("Master Manifest –ø–∏—à–µ—Ç üí¨") # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç

        # üü° –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
        user.request_status = "pending"
        await session.commit()

        # –°—Ç–∞—Ä—Ç—É–µ–º —Ñ–æ–Ω–æ–≤—ã–π "–Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞"
        stop_event = asyncio.Event()
        typing_task = asyncio.create_task(send_typing(bot, message.chat.id, stop_event))

        answer = await ask_assistant(
            queue=openai_queue,
            user_id=user.telegram_id,
            thread_id=user.thread_id,
            message=message.text
        )

        # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        stop_event.set()
        typing_task.cancel()
        await typing_msg.delete()


        await message.answer(answer, parse_mode=ParseMode.MARKDOWN)

        # ‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω
        user.requests_left -= 1
        user.request_status = "complete"
        await session.commit()
    except Exception as e:
        await message.answer(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}\n\n–ï—Å–ª–∏ —ç—Ç–∞ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è —Å–æ–æ–±—â–∏—Ç–µ '
                             f'–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–± —ç—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ '
                             f'<a href="https://t.me/RomanMo_admin">@RomanMo_admin</a>')




# –ü—Ä–∏—ë–º –ø–ª–∞—Ç–µ–∂–∞


def generate_random_email():   # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª–∏–Ω–æ–π 10 —Å–∏–º–≤–æ–ª–æ–≤
    random_str = ''.join(random.choices(string.ascii_lowercase + string.digits, k=10))
    return f"{random_str}@yandex.ru"

@for_user_router.callback_query(F.data.startswith("pay"))
async def process_payment(callback: CallbackQuery, bot: Bot, session: AsyncSession):
    telegram_id = callback.from_user.id
    amount_map = {
        "pay30": 30,
        "pay550": 550,
        "pay2500": 2500
    }

    data_key = callback.data
    amount = amount_map.get(data_key)
    if not amount:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—É–º–º–∞", show_alert=True)
        return

    return_url = f"https://t.me/{(await bot.me()).username}"


    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(select(User).where(User.telegram_id == telegram_id))
    user = result.scalar_one_or_none()
    if not user:
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º email, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω
    if not user.email or user.email == "idle":
        user.email = generate_random_email()
        await session.commit()

    payment_payload = {
        "amount": {
            "value": f"{amount:.2f}",
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": return_url
        },
        "capture": True,
        "description": f"–ü–æ–∫—É–ø–∫–∞ –Ω–∞ {amount}‚ÇΩ",
        "metadata": {
            "telegram_id": str(telegram_id)
        },
        "receipt": {
            "customer": {
                "email": user.email
            },
            "items": [
                {
                    "description": f"–ü–æ–∫—É–ø–∫–∞ –Ω–∞ {amount}‚ÇΩ",
                    "quantity": "1.00",
                    "amount": {
                        "value": f"{amount:.2f}",
                        "currency": "RUB"
                    },
                    "vat_code": 1
                }
            ]
        }
    }
    def base64_auth():
        shop_id = os.getenv("YOOKASSA_SHOP_ID")
        secret = os.getenv("YOOKASSA_SECRET_KEY")
        raw = f"{shop_id}:{secret}".encode()
        return base64.b64encode(raw).decode()

    headers = {
        "Authorization": f"Basic {base64_auth()}",
        "Content-Type": "application/json",
        "Idempotence-Key": str(uuid4())
    }

    try:
        async with aiohttp.ClientSession() as session_http:
            async with session_http.post(
                url="https://api.yookassa.ru/v3/payments",
                json=payment_payload,
                headers=headers
            ) as resp:
                payment_response = await resp.json()

        print("üì¶ –û—Ç–≤–µ—Ç –æ—Ç –ÆKassa:", payment_response)

        if "confirmation" not in payment_response:
            error_text = payment_response.get("description", "–ù–µ—Ç –ø–æ–ª—è confirmation")
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ÆKassa: {error_text}")
            return

        confirmation_url = payment_response["confirmation"]["confirmation_url"]
        await callback.message.answer(
            f'–í—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã'
            f'\n\n–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã, –æ–Ω–∏ –æ—Ç–æ–±—Ä–∞–∑—è—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ -> ‚≠êÔ∏è –ë–∞–ª–∞–Ω—Å'
            f'\n\n<blockquote>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ Yoomoney (c–µ—Ä–≤–∏—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ü–ê–û "–°–±–µ—Ä–±–∞–Ω–∫")</blockquote>',
            reply_markup=payment_button_keyboard(confirmation_url)
        )
        await callback.answer()

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:", e)
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.")



# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ Mari

@for_user_router.channel_post()
async def forward_post_to_users(message: Message, bot: Bot):
    if message.chat.id != channel:
        return

    async with session_maker() as session:
        last_id = await get_last_post_id(session)
        if message.message_id <= last_id:
            return  # —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ø–æ—Å—Ç

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        result = await session.execute(select(User.telegram_id))
        users = result.scalars().all()

        for user_id in users:
            try:
                await bot.forward_message(
                    chat_id=user_id,
                    from_chat_id=channel,
                    message_id=message.message_id,
                )
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º last_post_id
        await set_last_post_id(session, message.message_id)





