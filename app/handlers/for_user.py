from aiogram import F, Router, types, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile, CallbackQuery, InputMediaPhoto, PreCheckoutQuery, ContentType, SuccessfulPayment
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from app.handlers.text_for_user import text_privacy, text_offer
import app.handlers.keyboards as kb
from app.db.crud import get_or_create_user
from app.db.models import User
from app.openai_assistant.client import ask_assistant
from app.openai_assistant.queue import openai_queue


for_user_router = Router()




# –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ú–ï–ù–Æ

@for_user_router.message(Command("balance"))
async def policy_cmd(message: Message, bot: Bot, session: AsyncSession):
    result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
    user = result.scalar_one_or_none()
    if user.requests_left == 0:
        await message.answer("üö´ –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å", reply_markup=kb.pay)
        return
    text_balance = (f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤: {user.requests_left}"
                    f"\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ")
    await message.answer(text_balance, reply_markup=kb.pay)


@for_user_router.message(Command("privacy"))
async def policy_cmd(message: Message):
    await message.answer(text_privacy)


@for_user_router.message(Command("offer"))
async def offer_cmd(message: Message):
    await message.answer(text_offer)


@for_user_router.message(CommandStart())
async def cmd_start(message: Message, bot: Bot, session: AsyncSession):
    await get_or_create_user(session, message.from_user.id)
    string = (f"üìñ –ß—Ç–æ —Ç–∞–∫–æ–µ @MasterManifest_Bot –∏ –∫–∞–∫ –æ–Ω –ø–æ–º–æ–∂–µ—Ç –≤–∞–º?"
              f"\n\n–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º—É–¥—Ä–æ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É, –∫–æ—Ç–æ—Ä—ã–π:"
              f"\n\n‚ú® –ß–∏—Ç–∞–ª —Ç—ã—Å—è—á–∏ –∫–Ω–∏–≥, —Å—Ç–∞—Ç–µ–π –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"
              f"\n‚ú® –ü–æ–Ω–∏–º–∞–µ—Ç, –∫–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω–æ –º—ã—à–ª–µ–Ω–∏–µ –∏ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–∞—à–∏ —É–±–µ–∂–¥–µ–Ω–∏—è"
              f"\n‚ú® –ú–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤–∞–º –∏–∑–º–µ–Ω–∏—Ç—å –º—ã—à–ª–µ–Ω–∏–µ, –ø–æ–≤–µ—Ä–∏—Ç—å –≤ —Å–µ–±—è –∏ –Ω–∞—É—á–∏—Ç—å—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–ª—É –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞—Ü–∏–∏"
              f"\n\n–≠—Ç–æ –∏ –µ—Å—Ç—å @MasterManifest_Bot ‚Äî —É–º–Ω—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å –ø–æ–º–æ—â—å—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π "
              f"–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –û–Ω —É–º–µ–µ—Ç –ø–æ–Ω–∏–º–∞—Ç—å –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –¥–∞–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –ø—Ä–æ—Å—Ç—ã–º, –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º ‚Äî –±–µ–∑ –æ—Å—É–∂–¥–µ–Ω–∏—è "
              f"–∏ –ª–∏—à–Ω–µ–π —Ç–µ–æ—Ä–∏–∏\n"
              f"\n–ù–æ —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ ‚Äî —ç—Ç–æ—Ç –±–æ—Ç –æ–±—É—á–µ–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –≤ —Ç–∞–∫–∏—Ö —Ç–µ–º–∞—Ö, –∫–∞–∫:\n"
              f"\nüí≠ –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∂–µ–ª–∞–Ω–∏–π"
              f"\nüßò‚Äç‚ôÄÔ∏è –°–∏–ª–∞ –º—ã—Å–ª–∏ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –º—ã—à–ª–µ–Ω–∏—è"
              f"\nüíé –§–∏–ª–æ—Å–æ—Ñ–∏—è –±–æ–≥–∞—Ç—Å—Ç–≤–∞"
              f"\nüåå –ó–∞–∫–æ–Ω –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è"
              f"\nüå± –†–∞–±–æ—Ç–∞ —Å –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ–º –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏\n"
              f"\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏–ª–∏ –ø–æ—à–∞–≥–æ–≤—ã–π —Å–æ–≤–µ—Ç, –∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é "
              f"—Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞")
    await message.answer(text=string)
    result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
    user = result.scalar_one_or_none()
    if user.requests_left == 0:
        await message.answer("üö´ –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å", reply_markup=kb.pay)
        return





# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò

@for_user_router.message(~(F.text))
async def filter(message: Message):
        await message.delete()
        await message.answer("–ó–∞–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–∫—Å—Ç–∞")




@for_user_router.message(F.text)
async def handle_text(message: Message, session: AsyncSession):
    result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
    user = result.scalar_one_or_none()
    if user.requests_left == 0:
        await message.answer("‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã.")
        return

    if not openai_queue:
        await message.answer("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    try:
        answer = await ask_assistant(
            queue=openai_queue,
            user_id=user.telegram_id,
            thread_id=user.thread_id,
            message=message.text
        )
        await message.answer(answer)
        user.requests_left -= 1
        await session.commit()
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

