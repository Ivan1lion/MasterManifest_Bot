import asyncio
import os


from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.bot import DefaultBotProperties
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web


from dotenv import find_dotenv, load_dotenv
load_dotenv(find_dotenv())

from app.db.config import create_db, drop_db, session_maker
from app.db.crud import notify_pending_users, fetch_and_send_unsent_post
from app.middlewares.db_session import DataBaseSession
from app.handlers.for_user import for_user_router
from app.comands_menu.bot_menu_cmds import bot_menu
from app.openai_assistant.queue import OpenAIRequestQueue
from app.payments.payment_routes import yookassa_webhook_handler





bot = Bot(token=os.getenv("TOKEN"), default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

dp.include_router(for_user_router)

openai_queue: OpenAIRequestQueue | None = None


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
WEBHOOK_PATH = "/webhook"
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = 8000


async def on_startup(dispatcher: Dispatcher):
    print("GO bd")
    await bot.set_webhook(
        url=WEBHOOK_URL,
        drop_pending_updates=True,
        allowed_updates=["message", "edited_message", "callback_query", "inline_query", "chosen_inline_result",
                         "callback_query", "shipping_query", "pre_checkout_query", "poll", "poll_answer",
                         "my_chat_member", "chat_member", "chat_join_request", "channel_post", "edited_channel_post"]
    )
    # await bot.set_webhook(url=WEBHOOK_URL, drop_pending_updates=True)
    await bot.set_my_description(description=f"‚ú® –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º—É–¥—Ä–æ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É, –∫–æ—Ç–æ—Ä—ã–π: "
                                             f"\n\n- –ß–∏—Ç–∞–ª —Ç—ã—Å—è—á–∏ –∫–Ω–∏–≥, —Å—Ç–∞—Ç–µ–π –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π "
                                             f"\n- –ü–æ–Ω–∏–º–∞–µ—Ç, –∫–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω–æ –º—ã—à–ª–µ–Ω–∏–µ –∏ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–≤–æ–∏ —É–±–µ–∂–¥–µ–Ω–∏—è "
                                             f"\n- –ü–æ–º–æ–∂–µ—Ç –ø–æ–≤–µ—Ä–∏—Ç—å –≤ —Å–µ–±—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–ª—É "
                                             f"–º–∞–Ω–∏—Ñ–µ—Å—Ç–∞—Ü–∏–∏ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∂–µ–ª–∞–Ω–∏–π "
                                             f"\n\nüìö –í –æ—Å–Ω–æ–≤–µ –±–æ—Ç–∞ ‚Äî —É—á–µ–Ω–∏—è Neville Goddard, Bob Proctor, Napoleon Hill, "
                                             f"Joe Dispenza, –í–∞–¥–∏–º–∞ –ó–µ–ª–∞–Ω–¥–∞ –∏ –¥—Ä—É–≥–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ "
                                             )
    await bot.set_my_short_description(short_description=f"–ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∞—Ä–∏—è (–º–æ–∂–Ω–æ Mari ü§ó). –Ø —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∞ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, "
                                                         f"—á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º "
                                                         f"\n\nadmin: @RomanMo_admin")
    # await drop_db() # —É–¥–∞–ª–µ–Ω–∏–µ –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö
    await create_db() # —Å–æ–∑–¥–∞–Ω–∏–µ –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö
    global openai_queue
    openai_queue = OpenAIRequestQueue()
    await notify_pending_users(bot, session_maker)
    async with session_maker() as session:
        await fetch_and_send_unsent_post(bot, session)


async def on_shutdown(dispatcher: Dispatcher):
    print("on_shutdown")
    await bot.session.close()




async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    dp.update.middleware(DataBaseSession(session_pool=session_maker)) # Middleware —Å–µ—Å—Å–∏–∏ –ë–î
    # await bot.set_my_commands(scope=types.BotCommandScopeAllPrivateChats) #–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    await bot.set_my_commands(commands=bot_menu, scope=types.BotCommandScopeAllPrivateChats())

    # üåê –°–æ–∑–¥–∞—ë–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()

    async def health(request):
        return web.Response(text="ok")     #–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ –¥–ª—è Caddy
    app.router.add_get("/health", health)

    app.router.add_post("/yookassa/webhook", yookassa_webhook_handler)
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)
    app.on_shutdown.append(on_shutdown)

    # üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º aiohttp-—Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host=WEBAPP_HOST, port=WEBAPP_PORT)
    await site.start()

    print(f"Bot is running on {WEBAPP_HOST}:{WEBAPP_PORT}")
    print(f"Webhook URL: {WEBHOOK_URL}")

    # üïí –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ (–¥–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º)
    await asyncio.Event().wait()



if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Exit")